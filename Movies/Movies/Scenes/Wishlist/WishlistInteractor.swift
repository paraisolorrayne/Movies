//
//  WishlistInteractor.swift
//  Movies
//
//  Created by Lorrayne Paraiso  on 30/10/18.
//  Copyright (c) 2018 Lorrayne Paraiso. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WishlistBusinessLogic {
    func fetchFromDataStore(with request: WishlistModels.FetchFromDataStore.Request)
    func Wishlist(with request: WishlistModels.Wishlist.Request)
}

protocol WishlistDataStore {
    var attribute: String? { get set }
}

class WishlistInteractor: WishlistBusinessLogic, WishlistDataStore {
    var worker: WishlistWorker?
    var presenter: WishlistPresentationLogic?

    var attribute: String?

    // MARK: Use Case - Fetch Data From DataStore

    func fetchFromDataStore(with request: WishlistModels.FetchFromDataStore.Request) {
        attribute = ""
        let response = WishlistModels.FetchFromDataStore.Response(userAttribute: attribute!)
        presenter?.presentFetchFromDataStoreResult(with: response)
    }

    // MARK: Use Case - Wishlist

    func Wishlist(with request: WishlistModels.Wishlist.Request) {

        var isError = false
        var variablePassed = WishlistModels.VariablePassed()

        // MARK: Empty variablePassed Check

        if request.variableToPass == nil {
            isError = true
            variablePassed.errorMessage = "Some localised empty/nil error message string."
        }

        if isError {
            let response = WishlistModels.Wishlist.Response(containsErrors: true, genericErrorMessage: nil, variablePassed: variablePassed)
            presenter?.presentWishlistResult(with: response)
            return
        }

        // MARK: Execute Use Case

        worker = WishlistWorker()
        worker?.Wishlist(completionHandler: { (isSuccessful, errorMessage) in
            if isSuccessful {
                self.attribute = request.variableToPass!

                let response = WishlistModels.Wishlist.Response(containsErrors: false, genericErrorMessage: nil, variablePassed: variablePassed)
                self.presenter?.presentWishlistResult(with: response)
            }
            else {
                let response = WishlistModels.Wishlist.Response(containsErrors: true, genericErrorMessage: errorMessage, variablePassed: variablePassed)
                self.presenter?.presentWishlistResult(with: response)
            }
        })
    }
}
